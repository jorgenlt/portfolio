<!-- Modal -->
<div class="modal fade" id="messagemateModal" tabindex="-1" aria-labelledby="messagemateModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-fullscreen-lg-down modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-2" id="messagemateModalLabel">MessageMate</h1>
        <span data-bs-dismiss="modal" aria-label="Close"><i class="fa-solid fa-xmark hover-brighter-green"></i></span>
      </div>
      <div class="modal-body modal-template messagemate-modal-body">
        <div class="messagemate-description">
          <div class="messsagemate-text">
            <p>A responsive instant messenger application for desktop and mobile.</p>
            <p>Visit site: <%= link_to 'messagemate.me', 'https://www.messagemate.me', target: "_blank"  %></p>
            <p>Download for android: <%= link_to 'messagemate.apk', '/messagemate.apk', target: "_blank"  %></p>
            <p><%= link_to 'View on GitHub', 'https://github.com/jorgenlt/messagemate', target: "_blank"  %></p>
          </div>
          <div class="messagemate-video">
            <iframe src="https://player.vimeo.com/video/793256271?h=70456f8a85&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479"
                    width="290"
                    height="644"
                    frameborder="0"
                    allow="autoplay; fullscreen; picture-in-picture"
                    allowfullscreen title="Screenrecorder-2023-01-27-14-23-07-727">
            </iframe>
          </div>
        </div>
        <div class="messagemate-media">
          <div class="messagemate-phone">
            <div class="messagemate-photos">
              <%= image_tag 'messagemate_phone1.png', alt: "messagemate on phone." %>
              <%= image_tag 'messagemate_phone2.png', alt: "messagemate on phone." %>
            </div>
          </div>
          <div>
          </div>
          <div class="messagemate-desktop">
            <%= image_tag 'messagemate_desktop1.png', alt: "messagemate on desktop." %>
          </div>
        </div>

        <div class="messagemate-documentation">
          <h2>Features</h2>
            <ul>
              <li><i class="fa-solid fa-circle-arrow-right"></i>A user can sign up and sign in, and add a picture to their profile. Account information and profile picture can be edited by the user at a later time.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>A user can add another user to start a new conversation ("chatroom").</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>A user can send and receive messages in real-time.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>Secure authentication and authorization.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>Mobile responsiveness to ensure an optimal user experience. The app can be downloaded as an apk-file for android or used in the browser on desktop or mobile.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>Ligthweight, fast and simple messaging web application.</li>
            </ul>

          <h2>Technologies</h2>
          <p>
            MessageMate is built with <%= link_to 'Ruby on Rails', 'https://rubyonrails.org/', target: '_blank' %> on both backend and frontend.
            Data is stored in a PostgreSQL database and Cloudinary is used for cloud storage of the profile image files. Authentication and authorization
            is being handled with the <%= link_to 'Devise gem', 'https://github.com/heartcombo/devise', target: '_blank' %>. This ensures the user to
            securely sign in and sign up to the application, authorization is given to the user so that they can only view their own content. The
            application is using Websocket with Action Cable for real-time, two-way communication between the server and client. This allows the exchange of
            messages in both directions without the need for a new request to be made for each message.

            The application is additionally supported by Webpack, simple_form, stimulus and bootstrap.
          </p>

          <h2>Technical challenges</h2>
            <h3>Making the messages appear in real time for sender and receiver</h3>
            <p>
              <%= link_to 'Action Cable', 'https://guides.rubyonrails.org/action_cable_overview.html', target: '_blank' %> is a feature of
              Ruby on Rails that provides a framework for using WebSockets in a Rails application. It allows us to create "channels" in our
              application, which can receive and broadcast messages in real-time. This makes it possible to build real-time applications,
              such as chat apps, posts, comments, and other features that requires real-time updates and notifications.
            </p>
            <p>
              On connection to the chatrooom page the user is subscribed to the channel Chatroom. Using javascript the messages are inserted
              into the DOM.
            </p>
<pre>
<code class="language-javascript">
// app/javascript/controllers/chatroom_subscription_controller.js

// when the user connects to the page a subscription to the channel is made.
  connect() {
    this.channel = createConsumer().subscriptions.create(
      { channel: "ChatroomChannel", id: this.chatroomIdValue },
      { received: data => this.#insertMessageAndScrollDown(data) }
      )
      console.log(`Subscribed to the chatroom with the id ${this.chatroomIdValue}.`)
  }

  #insertMessageAndScrollDown(data) {
    // logic to know if the sender is the current_user
    const currentUserIsSender = this.currentUserIdValue === data.sender_id

    // creating the whole message from the `data.message` string
    const messageElement = this.#buildMessageElement(currentUserIsSender, data.message)

    // inserting the `message` in the DOM
    this.messagesTarget.insertAdjacentHTML("beforeend", messageElement)
    window.scrollTo(0, document.body.scrollHeight);
  }

  // function to build a complete message with its two wrapping div,
  // passing it the currentUserIsSender boolean, and the message string
  // coming from the data:
  #buildMessageElement(currentUserIsSender, message) {
    return `
    &lt;div class="message-row d-flex ${this.#justifyClass(currentUserIsSender)}">
    &lt;div class="${this.#userStyleClass(currentUserIsSender)}">
    ${message}
    &lt;/div>
    &lt;/div>
    `
  }

  // two functions to return the relevant classes to position and style the message
  // the user on the right and the recipient on the left, like other popular messaging services.
  #justifyClass(currentUserIsSender) {
    return currentUserIsSender ? "justify-content-end" : "justify-content-start"
  }

  #userStyleClass(currentUserIsSender) {
    return currentUserIsSender ? "sender-style" : "receiver-style"
  }

  // reset the send message input field after the message is sent
  resetForm(event) {
    event.target.reset()
  }

  // unsubscribe from the channel when user leaves the page
  disconnect() {
    console.log("Unsubscribed from the chatroom")
    this.channel.unsubscribe()
  }
}

</code>
</pre>
          <p>On the server-side each new message is broadcasted if the message is created and saved successfully.</p>
<pre>
<code class="language-ruby">
# app/controllers/messages_controller.rb

def create
  @chatroom = Chatroom.find(params[:chatroom_id])
  @message = Message.new(message_params)
  @message.chatroom_id = @chatroom.id
  @message.user_id = current_user.id

  if message_params[:message_body].empty?
    # submit button 'send' does nothing.
  else
    # setting sender/receiver of the message
    if current_user.id == @chatroom.user_id
      @message.recipient_id = @chatroom.recipient_id
    else
      @message.recipient_id = @chatroom.user_id
    end

    # if the message is saved successfully the message is broadcasted to the Chatroom channel.
    if @message.save
      ChatroomChannel.broadcast_to(
        @chatroom,
        message: render_to_string(partial: "message", locals: { message: @message }),
        sender_id: @message.user.id
      )
      head :ok
    else
      render "chatrooms/show", status: :unprocessable_entity
      flash.alert = "Error. Message was not sent."
    end
  end
end
</code>
</pre>
          <p>The messages are displayed in the chatroom show view.</p>
<pre>
<code class="language-html">
&lt;!-- app/views/chatrooms/show.html.erb -->

&lt;div class="chat"
  data-controller="chatroom-subscription"
  data-chatroom-subscription-chatroom-id-value="&lt;%= @chatroom.id %>"
  data-chatroom-subscription-current-user-id-value="&lt;%= current_user.id %>"
>
  &lt;div class="messages" data-chatroom-subscription-target="messages">
    &lt;% @chatroom.messages.each do |message| %>
      &lt;div class="d-flex &lt;%= message.sender?(current_user) ? 'justify-content-end' : 'justify-content-start' %>">
        &lt;div class="&lt;%= message.sender?(current_user) ? 'sender-style' : 'receiver-style' %>">
          &lt;div data-controller="messagesent">
            &lt;div data-messagesent-target="messagesent" class="d-none message-sent-at">
              &lt;span>
              Sent &lt;%= time_ago_in_words(message.created_at) %> ago.
              &lt;/span>
            &lt;/div>
            &lt;div class="message" data-action="click->messagesent#messageSent">
              &lt;div class="message-content">
                &lt;p>&lt;%= message.message_body %>&lt;/p>
              &lt;/div>
            &lt;/div>
          &lt;/div>
        &lt;/div>
      &lt;/div>
    &lt;% end %>
  &lt;/div>

  &lt;div id="new-message">
    &lt;%= simple_form_for [@chatroom, @message],
      html: { data: { action: "turbo:submit-end->chatroom-subscription#resetForm" },
      class: "d-flex" } do |f| %>
      &lt;div id="message-form">
        &lt;div class="message-text">
          &lt;%= f.input :message_body,
                      as: :text,
                      label: false,
                      placeholder: "New message",
                      input_html: { rows: 1 }
                    %>
        &lt;/div>
        &lt;div class="send-message">
          &lt;%= f.button :submit, 'SEND', class: "submit-button"%>
        &lt;/div>
      &lt;/div >
    &lt;% end %>
  &lt;/div>
&lt;/div>
</code>
</pre>
          <h2>Upcoming features</h2>
            <ul>
              <li><i class="fa-solid fa-circle-arrow-right"></i>A user can see other users profile.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>A user can add personal information to their profile.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>Notifications in android app.</li>
              <li><i class="fa-solid fa-circle-arrow-right"></i>A user can start a group chat.</li>
            </ul>

        </div>
      </div>
    </div>
  </div>
</div>
